name: Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@8f4b7f84861384cbb38fd579973d0e3c8f672892
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@a1a7e6f7f619c3e75f015d7709f4b9d0eee115a4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@88522ab9f39a2e970b61b92e19f7e6c762f8d3bb
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pylint black flake8
    
    - name: Run linting with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check app tests || true
    
    - name: Run pylint
      run: |
        pylint app --exit-zero --max-line-length=127
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@eaaf4bedf32dbdc6b72056ca90276faea08e5a2e
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Check for security issues
      run: |
        pip install safety
        safety check --json || true

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@8f4b7f84861384cbb38fd579973d0e3c8f672892
    
    - name: Set up Python
      uses: actions/setup-python@a1a7e6f7f619c3e75f015d7709f4b9d0eee115a4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Test CLI commands
      run: |
        # Test analyze command (without AI)
        python app/main.py analyze examples/sample_sales.csv --no-visualize --output ./test_output || echo "CLI test warning"
        
        # Verify output created
        test -d ./test_output && echo "Output directory created" || echo "No output directory"
    
    - name: Test demo script
      run: |
        python examples/demo.py || echo "Demo completed with warnings"

  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@8f4b7f84861384cbb38fd579973d0e3c8f672892
    
    - name: Check README exists
      run: |
        test -f README.md && echo "✓ README.md exists"
        test -f LICENSE && echo "✓ LICENSE exists"
        test -f requirements.txt && echo "✓ requirements.txt exists"
    
    - name: Check documentation completeness
      run: |
        test -f docs/architecture.md && echo "✓ architecture.md exists"
        test -f docs/api_usage.md && echo "✓ api_usage.md exists"
    
    - name: Validate requirements.txt
      run: |
        pip install --dry-run -r requirements.txt

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@8f4b7f84861384cbb38fd579973d0e3c8f672892
    
    - name: Check for secrets
      run: |
        # Check for hardcoded API keys or secrets
        ! grep -r "ALCHEMYST_API_KEY.*=.*[a-zA-Z0-9]" app/ || (echo "Found hardcoded API key!" && exit 1)
        ! grep -r "api_key.*=.*['\"][a-zA-Z0-9]" app/ || (echo "Found hardcoded API key!" && exit 1)
        echo "✓ No hardcoded secrets found"
    
    - name: Check .env files are gitignored
      run: |
        ! git ls-files | grep -E "\.env$" || (echo ".env file is tracked!" && exit 1)
        echo "✓ No .env files in git"

