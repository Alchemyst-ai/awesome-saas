"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const tslib_1 = require("../../../internal/tslib.js");
const resource_1 = require("../../../core/resource.js");
const MemoryAPI = tslib_1.__importStar(require("./memory.js"));
const memory_1 = require("./memory.js");
const TracesAPI = tslib_1.__importStar(require("./traces.js"));
const traces_1 = require("./traces.js");
const ViewAPI = tslib_1.__importStar(require("./view.js"));
const view_1 = require("./view.js");
class Context extends resource_1.APIResource {
    constructor() {
        super(...arguments);
        this.traces = new TracesAPI.Traces(this._client);
        this.view = new ViewAPI.View(this._client);
        this.memory = new MemoryAPI.Memory(this._client);
    }
    /**
     * Deletes context data based on provided parameters
     *
     * @example
     * ```ts
     * const context = await client.v1.context.delete();
     * ```
     */
    delete(body, options) {
        return this._client.post('/api/v1/context/delete', { body, ...options });
    }
    /**
     * This endpoint accepts context data and sends it to a context processor for
     * further handling. It returns a success or error response depending on the result
     * from the context processor.
     *
     * @example
     * ```ts
     * const response = await client.v1.context.add();
     * ```
     */
    add(body, options) {
        return this._client.post('/api/v1/context/add', { body, ...options });
    }
    /**
     * This endpoint sends a search request to the context processor to retrieve
     * relevant context data based on the provided query.
     *
     * @example
     * ```ts
     * const response = await client.v1.context.search({
     *   minimum_similarity_threshold: 0.5,
     *   query: 'search query for user preferences',
     *   similarity_threshold: 0.8,
     * });
     * ```
     */
    search(body, options) {
        return this._client.post('/api/v1/context/search', { body, ...options });
    }
}
exports.Context = Context;
Context.Traces = traces_1.Traces;
Context.View = view_1.View;
Context.Memory = memory_1.Memory;
//# sourceMappingURL=context.js.map