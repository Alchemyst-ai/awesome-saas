// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
import { APIResource } from "../../../core/resource.mjs";
import * as MemoryAPI from "./memory.mjs";
import { Memory } from "./memory.mjs";
import * as TracesAPI from "./traces.mjs";
import { Traces } from "./traces.mjs";
import * as ViewAPI from "./view.mjs";
import { View } from "./view.mjs";
export class Context extends APIResource {
    constructor() {
        super(...arguments);
        this.traces = new TracesAPI.Traces(this._client);
        this.view = new ViewAPI.View(this._client);
        this.memory = new MemoryAPI.Memory(this._client);
    }
    /**
     * Deletes context data based on provided parameters
     *
     * @example
     * ```ts
     * const context = await client.v1.context.delete();
     * ```
     */
    delete(body, options) {
        return this._client.post('/api/v1/context/delete', { body, ...options });
    }
    /**
     * This endpoint accepts context data and sends it to a context processor for
     * further handling. It returns a success or error response depending on the result
     * from the context processor.
     *
     * @example
     * ```ts
     * const response = await client.v1.context.add();
     * ```
     */
    add(body, options) {
        return this._client.post('/api/v1/context/add', { body, ...options });
    }
    /**
     * This endpoint sends a search request to the context processor to retrieve
     * relevant context data based on the provided query.
     *
     * @example
     * ```ts
     * const response = await client.v1.context.search({
     *   minimum_similarity_threshold: 0.5,
     *   query: 'search query for user preferences',
     *   similarity_threshold: 0.8,
     * });
     * ```
     */
    search(body, options) {
        return this._client.post('/api/v1/context/search', { body, ...options });
    }
}
Context.Traces = Traces;
Context.View = View;
Context.Memory = Memory;
//# sourceMappingURL=context.mjs.map